@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8" />
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>chaos組牌器</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.2.1/css/bootstrap.min.css" integrity="sha384-GJzZqFGwb1QTTN6wy59ffF1BuGJpLSa9DkKMp0DgiMDm4iYMj70gZWKYbI706tWS" crossorigin="anonymous">
    <script src="~/Content/vue.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/axios/0.18.0/axios.min.js"></script>
    <style>
        * {
            /*border: 1px solid black*/
            font-family: '微軟正黑體'
        }

        .img-preview img {
            width: 100%;
            min-height:200px;
        }

        .card-list {
            height: 80vh;
            overflow-y: scroll;
        }

        .deck-area {
            position: relative;
            height: 70vh;
        }

        .main-area-card-img, .extra-area-card-img {
            width: 10%;
            display: inline-block;
        }

            .main-area-card-img > img, .extra-area-card-img > img {
                max-width: 100%
            }

        .extra-deck-area {
            width: 100%;
            position: absolute;
            bottom: 0%;
        }
        .main-deck-area {
            min-height:500px;
        }
        .extra-deck-area {
            min-height: 150px;
        }
    </style>
</head>
<body>
    <div class="container" id="app">
        <div class="row">
            <div class="col-3">
                <div class="img-preview pt-3">
                    <img :src="'/Images/' + cardDetail.IMG_FOLDER + '/' + cardDetail.IMG_NAME" alt="" />
                </div>
                <div class="detail-card-info">
                    <div id="detail-card-name" class="text-center">{{cardDetail.NAME}}</div>
                    <table class="table">
                        <tr><td>屬性</td><td>{{cardDetail.ATTR}}</td><td>種類</td><td>{{cardDetail.TYPE}}</td></tr>
                        <tr><td>攻擊</td><td>{{cardDetail.ATK}}</td><td>耐久</td><td>{{cardDetail.DEF}}</td></tr>
                        <tr>
                            <td class="value effects" colspan="4">
                                {{cardDetail.EFFECT}}
                            </td>
                        </tr>
                    </table>
                </div>
            </div>
            <div class="col-7">
                <div class="player-operate-area my-4">
                    <div class="form-group">
                        <label for="ddl-deck">選擇牌組：</label>
                        <select id="ddl-deck" v-model="ddlDeckVal" v-on:change="changeCurrentDeck">
                            <option :value="deck.sid" v-for="deck in decks">{{deck.name}}</option>
                        </select>
                        <input type="button" value="刪除" class="btn btn-dark" v-on:click="deleteDeck" />
                    </div>
                    <div class="form-group">
                        <label for="txt-deck">新建牌組：</label>
                        <input type="text" id="txt-deck" v-model="txtDeckName"/>
                        <input type="button" value="新增" class="btn btn-dark" v-on:click="createNewDeck" />
                        <input type="button" value="輸出" class="btn btn-dark" v-on:click="exportDeck" />
                        <input type="button" value="存檔" class="btn btn-dark" v-on:click="saveDeck"/>
                    </div>
                </div>
                <div class="deck-area">
                    <div class="main-deck-area" v-on:drop='drop($event,1)' v-on:dragover='allowDrop($event)'>
                        <h4 class="text-center">Main Deck</h4>
                        <div>
                            <div class="main-area-card-img" v-for="item in currentDeck.mainDeck">
                                <img :src="'/Images/' + item.IMG_FOLDER + '/' + item.IMG_NAME" alt="" draggable="false" v-on:mouseover="showCardDetail(item)" v-on:click="deleteCard(item.SID,1)" />
                            </div>
                        </div>
                    </div>
                    <div class="extra-deck-area" v-on:drop='drop($event,2)' v-on:dragover='allowDrop($event)'>
                        <h4 class="text-center">Extra Deck</h4>
                        <div>
                            <div class="extra-area-card-img" v-for="item in currentDeck.extraDeck">
                                <img :src="'/Images/' + item.IMG_FOLDER + '/' + item.IMG_NAME" alt="" draggable="false" v-on:mouseover="showCardDetail(item)" v-on:click="deleteCard(item.SID,2)" />
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-2">
                <div class="form-group pt-3">
                    <label for="card-search"><input type="text" class="form-control" id="card-search" placeholder="請輸入關鍵字" v-model="txtSearch" v-on:keyup="searchCardPool(1)"></label>
                </div>
                <div class="card-search-area">
                    <div class="card-list">
                        <div class="search-img mt-2 mr-2" v-for="item in cardPool" v-on:mouseover="showCardDetail(item)">
                            <img :src="'/Images/' + item.IMG_FOLDER + '/' + item.IMG_NAME" alt="" class="img-fluid" draggable="true" v-on:dragstart='drag($event,item)' />
                        </div>
                        <div class="my-2">
                            <input type="button" value="更多" class="btn btn-dark d-block mx-auto" v-if="moreBtnShow" v-on:click="searchCardPool(2)" />
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    @Scripts.Render("~/bundles/jquery")
    <script>    
        var app = new Vue({
            el: '#app',
            data: {
                txtDeckName: "",
                txtSearch:"",
                cardDetail: {},
                currentDeck: {},
                selectedDeck: "",
                decks: [],
                page: 1,
                cardPool: [],
                moreBtnShow: false,
                draggedCard: {},
                ddlDeckVal : ""
            },
            mounted: function () {
                let _this = this
                if (localStorage.getItem('decks')) {
                    _this.decks = JSON.parse(localStorage.getItem('decks'))
                }
                if (_this.decks.length > 0) {
                    _this.currentDeck = _this.decks[0]
                    _this.ddlDeckVal = _this.decks[0].sid
                }
            },
            methods: {
                createNewDeck: function () {
                    let _this =this
                    if (_this.txtDeckName) {
                        _this.currentDeck = new Deck(_this.generateSId(),_this.txtDeckName)
                        _this.decks.push(_this.currentDeck)
                        _this.ddlDeckVal = _this.currentDeck.sid
                    }
                },
                deleteDeck: function () {
                    let _this = this
                    let index = _this.decks.findIndex(x => x.sid == _this.currentDeck.sid);
                    if (index > -1)
                    _this.decks.splice(index,1)
                },
                // type : 1 = 主牌組 , 2 = 額外牌組
                deleteCard: function (sid ,type) {
                    let _this = this
                    if (type == 1)
                    {
                        let index = _this.currentDeck.mainDeck.findIndex(x => x.SID == sid);
                        if (index > -1) {
                            this.currentDeck.mainDeck.splice(index, 1)
                        }
                    }
                    else
                    {
                        let index = _this.currentDeck.extraDeck.findIndex(x => x.SID == sid);
                        if (index > -1) {
                            this.currentDeck.extraDeck.splice(index, 1)
                        }
                    }
                },
                changeCurrentDeck: function () {
                    let _this = this
                    _this.currentDeck = this.decks.filter(x => x.sid == _this.ddlDeckVal) [0]
                },
                generateSId: function () {
                    return Math.floor((1 + Math.random()) * 0x1000000000).toString("16") + Math.floor((1 + Math.random()) * 0x1000000000).toString("16")
                },
                // type : 1 = 基本搜尋 , 2 = 更多搜尋
                searchCardPool: function (type) {
                    let _this = this
                    if (_this.txtSearch) {
                        if (type == 1) {
                            _this.page = 1
                        }
                        else {
                            _this.page++
                        }
                        var bodyFormData = new FormData();
                        bodyFormData.set('keyword', _this.txtSearch);
                        bodyFormData.set('page', _this.page);
                        axios({
                            url: '/home/search',
                            method: 'post',
                            data: bodyFormData,
                        })
                            .then(function (result) {
                                if (result.data.Success) {
                                    let returnCardPool = JSON.parse(result.data.CardPool)
                                    if (returnCardPool.length == 10) {
                                        _this.moreBtnShow = true
                                    }
                                    else {
                                        _this.moreBtnShow = false
                                    }
                                    if (type == 1) {
                                        _this.cardPool = returnCardPool
                                    }
                                    else {
                                        _this.cardPool = [..._this.cardPool, ...returnCardPool]
                                    }
                                }
                                else {
                                    _this.cardPool = []
                                }
                            })
                            .catch(err => {
                                console.log(err);
                            })
                    }
                    else {
                        _this.moreBtnShow = false
                    }
                },
                showCardDetail: function (item) {
                    _this = this
                    let tempCard = item
                    _this.cardDetail = new Card(tempCard.SID, tempCard.CARD_NUMBER, tempCard.TYPE, tempCard.ATTR, tempCard.ATK, tempCard.DEF, tempCard.ATK_COR, tempCard.DEF_COR, tempCard.SERIES, tempCard.EFFECT, tempCard.LINE, tempCard.IMG_FOLDER, tempCard.IMG_NAME, tempCard.NAME, tempCard.RARITY)
                },
                drag: function (event, item) {
                    var _this = this
                    _this.draggedCard = item
                },
                // type : 1 = 主牌組 , 2 = 額外牌組
                drop: function (event,type) {
                    event.preventDefault();
                    _this = this
                    if (_this.decks.length == 0) {
                        alert("請新增至少一個牌組！")
                    }
                    let _this = this
                    let tempCard = _this.draggedCard
                    if (type == 1) {
                        _this.currentDeck.mainDeck.push(new Card(tempCard.SID, tempCard.CARD_NUMBER, tempCard.TYPE, tempCard.ATTR, tempCard.ATK, tempCard.DEF, tempCard.ATK_COR, tempCard.DEF_COR, tempCard.SERIES, tempCard.EFFECT, tempCard.LINE, tempCard.IMG_FOLDER, tempCard.IMG_NAME, tempCard.NAME, tempCard.RARITY))
                    }
                    else {
                        _this.currentDeck.extraDeck.push(new Card(tempCard.SID, tempCard.CARD_NUMBER, tempCard.TYPE, tempCard.ATTR, tempCard.ATK, tempCard.DEF, tempCard.ATK_COR, tempCard.DEF_COR, tempCard.SERIES, tempCard.EFFECT, tempCard.LINE, tempCard.IMG_FOLDER, tempCard.IMG_NAME, tempCard.NAME, tempCard.RARITY))
                    }
                    
                },
                allowDrop: function (event) {
                    event.preventDefault();
                },
                saveDeck: function () {
                    localStorage.setItem('decks', JSON.stringify(_this.decks))
                },
                exportDeck: function () {
                    let _this = this
                    if (_this.currentDeck) {
                        let bodyFormData = new FormData();
                        var exportData = {}
                        exportData.MainDeck = _this.currentDeck.mainDeck.map(x => x.SID)
                        exportData.ExtraDeck = _this.currentDeck.extraDeck.map(x => x.SID)
                        bodyFormData.set('decks', JSON.stringify(exportData));
                        axios({
                            url: '/home/export',
                            method: 'post',
                            data: bodyFormData,
                        })
                            .then(function (result) {
                                if (result.data.Success && result.data.Path) {
                                    let eleLink = document.createElement('a');
                                    eleLink.download = result.data.Path;
                                    eleLink.href = result.data.Path;
                                    eleLink.style.display = 'none';
                                    document.body.appendChild(eleLink);
                                    eleLink.click();
                                    document.body.removeChild(eleLink);
                                }
                                else {
                                    console.log("匯出牌組失敗")
                                }
                            })
                            .catch(err => {
                                console.log(err);
                            })
                    }
                }
            },
        })

        //類別定義
        class Deck {
            constructor(sid, name) {
                this.sid = sid
                this.name = name
                this.mainDeck = []
                this.extraDeck = []
            }
        }
        class Card {
            constructor(sid, cardnum,type,attr,atk,def,atkCor,defCor,series,effect,line,imgFolder,imgName,name,rarity) {
                this.SID = sid
                this.CARD_NUMBER = cardnum
                this.TYPE = type
                this.ATTR = attr
                this.ATK = atk
                this.DEF = def
                this.ATK_COR = atkCor
                this.DEF_COR = defCor
                this.SERIES = series
                this.EFFECT = effect
                this.LINE = line
                this.IMG_FOLDER = imgFolder
                this.IMG_NAME = imgName
                this.NAME = name
                this.RARITY = rarity
            }
        }
    </script>
</body>
</html>
